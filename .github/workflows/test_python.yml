name: Test Python

on:
  workflow_call:
    inputs:
      cache-dependency-path:
        default: "**/requirements.txt"
        description: "Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies"
        required: false
        type: string
      checkout-fetch-depth:
        default: 1
        description: "Number of commits to fetch. 0 indicates all history for all branches and tags"
        required: false
        type: number
      coverage:
        default: true
        description: "Run tests with coverage"
        required: false
        type: boolean
      coverage-report:
        default: true
        description: "Use coverage with codecov.io"
        required: false
        type: boolean
      env-vars:
        description: "List of environment variables to set up, given in env=value format"
        required: false
        type: string
      export-secrets:
        description: "Export secrets to json file. If defined, this value belongs to the filename to be exported"
        required: false
        type: string
      install-extras:
        description: "Install with extras"
        required: false
        type: string
      nose-args:
        default: ""
        description: "Extra arguments passed to nose"
        required: false
        type: string
      os:
        description: "OS to run the job"
        required: true
        type: string
      python-version:
        description: "Python version"
        required: true
        type: string
      test:
        default: true
        description: "Enable testing execution with ctest"
        required: false
        type: boolean
      test-after:
        default: ""
        description: "Run a custom bash command after main test passed. Runs inside root path"
        required: false
        type: string
      test-before:
        default: ""
        description: "Run a custom bash command before main test are executed. Runs inside root path"
        required: false
        type: string
      timeout:
        default: 120
        description: "Job timeout"
        required: false
        type: number
    secrets:
      ACTIONS:
        required: false

jobs:
  run:
    runs-on: ${{ inputs.os }}
    timeout-minutes: ${{ inputs.timeout }}
    steps:
      - name: Checkout
        env:
          token: ${{ secrets.ACTIONS }}
        if: ${{ env.token == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.checkout-fetch-depth }}
          submodules: recursive

      - name: Checkout (with token)
        env:
          token: ${{ secrets.ACTIONS }}
        if: ${{ env.token != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.checkout-fetch-depth }}
          submodules: recursive
          token: ${{ secrets.ACTIONS }}

      - name: Set environment variables
        if: ${{ inputs.env-vars }}
        shell: bash
        run: |
          for i in "${{ inputs.env-vars }}"; do
            printf "%s\n" $i >> $GITHUB_ENV
          done

      - name: Export secrets
        if: ${{ inputs.export-secrets }}
        env:
          SECRETS_VARS: ${{ toJson(secrets) }}
        shell: bash
        run: echo "$SECRETS_VARS" > "${{ inputs.export-secrets }}"

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: ${{ inputs.cache-dependency-path }}
          python-version: ${{ inputs.python-version }}

      - name: Update Python pip
        shell: bash
        run: python -m pip install -U pip

      - name: Install dependencies
        if: ${{ !inputs.install-extras }}
        run: python -m pip install .

      - name: Install dependencies (w/extras)
        if: ${{ inputs.install-extras }}
        run: python -m pip install -e .[${{ inputs.install-extras }}]

      - name: Test
        if: ${{ inputs.test }}
        id: test
        shell: bash
        run: |
          export PYTHONPATH=$PWD
          ${{ inputs.test-before }}
          if [ "${{ inputs.coverage }}" = "true" ]; then
            nose2 --verbose --with-coverage ${{ inputs.nose-args }}
          else
            nose2 --verbose ${{ inputs.nose-args }}
          fi
          ${{ inputs.test-after }}

      - name: Coverage report
        if: ${{ inputs.coverage && inputs.coverage-report }}
        shell: bash
        run: bash <(curl -s https://codecov.io/bash)