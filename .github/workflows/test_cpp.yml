name: Test C++

on:
  workflow_call:
    inputs:
      build-type:
        default: "Debug"
        description: "Which build type to use for C++ (Debug, Release, etc.)"
        required: false
        type: string
      ccache-max-size:
        default: "1G"
        description: "Max size of ccache"
        required: false
        type: string
      checkout-fetch-depth:
        default: 0
        description: "Number of commits to fetch. 0 indicates all history for all branches and tags"
        required: false
        type: number
      cmake-check:
        default: true
        description: "Check CMake settings. Only for Linux"
        required: false
        type: boolean
      env-vars:
        description: "List of environment variables to set up, given in env=value format"
        required: false
        type: string
      export-secrets:
        description: "Export secrets to json file. If defined, this value belongs to the filename to be exported"
        required: false
        type: string
      linter:
        default: true
        description: "Use C++ linter. Only for Linux"
        required: false
        type: boolean
      os:
        description: "OS to run the job"
        required: true
        type: string
      qt-install:
        default: true
        description: "QT: Install"
        required: false
        type: boolean
      qt-modules:
        default: "qtcharts"
        description: "QT: Which modules to be installed"
        required: false
        type: string
      qt-version:
        default: "6.6.0"
        description: "QT: Which version to be installed"
        required: false
        type: string
      release-windows:
        default: false
        description: "If true, compile in Release mode and upload artifact. Only for Windows"
        required: false
        type: boolean
      release-windows-pr:
        default: true
        description: "Compile release only in PR mode"
        required: false
        type: boolean
      static-analysis:
        default: true
        description: "Run static analysis before build. Only for Linux"
        required: false
        type: boolean
      test:
        default: true
        description: "Enable testing execution with ctest"
        required: false
        type: boolean
      test-after:
        default: ""
        description: "Run a custom bash command after main test passed. Runs inside build/ path"
        required: false
        type: string
      test-before:
        default: ""
        description: "Run a custom bash command before main test are executed. Runs inside build/ path"
        required: false
        type: string
      timeout:
        default: 120
        description: "Job timeout"
        required: false
        type: number
    secrets:
      ACTIONS:
        required: false

jobs:
  run:
    runs-on: ${{ inputs.os }}
    timeout-minutes: ${{ inputs.timeout }}
    steps:
      - name: Checkout
        env:
          token: ${{ secrets.ACTIONS }}
        if: ${{ env.token == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.checkout-fetch-depth }}
          submodules: recursive

      - name: Checkout (with token)
        env:
          token: ${{ secrets.ACTIONS }}
        if: ${{ env.token != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.checkout-fetch-depth }}
          submodules: recursive
          token: ${{ secrets.ACTIONS }}

      - name: Configure environments
        shell: bash
        run: |
          # Configure global environments
          echo "GTEST_COLOR=1" >> $GITHUB_ENV
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          
          # Configure envs from workflow input
          for i in "${{ inputs.env-vars }}"; do
            printf "%s\n" $i >> $GITHUB_ENV
          done
          
          # Configure CMake/Qt/Ccache
          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "CMAKE_GENERATOR='Ninja'" >> $GITHUB_ENV
            echo "QT_ARCH=win64_mingw" >> $GITHUB_ENV
            if [ "${{ inputs.build-type }}" = "Debug" ]; then
              echo "CCACHE_VARIANT=sccache" >> $GITHUB_ENV
            fi
          else
            echo "CMAKE_GENERATOR='Unix Makefiles'" >> $GITHUB_ENV
            if [ "${{ inputs.build-type }}" = "Debug" ]; then
              echo "CCACHE_VARIANT=ccache" >> $GITHUB_ENV
            fi
          fi
          
          # Configure test mode
          echo "TEST_MODE=Test" >> $GITHUB_ENV

      - name: Export secrets
        if: ${{ inputs.export-secrets }}
        env:
          SECRETS_VARS: ${{ toJson(secrets) }}
        shell: bash
        run: echo "$SECRETS_VARS" > "${{ inputs.export-secrets }}"

      - name: Configure number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Install QT
        if: ${{ inputs.qt-install }}
        uses: jurplel/install-qt-action@v3
        with:
          arch: ${{ env.QT_ARCH }}
          cache: true
          modules: ${{ inputs.qt-modules }}
          version: ${{ inputs.qt-version }}

      - name: Install dependencies
        shell: bash
        run: |
          # Update python package manager
          python -m pip install -U pip
          
          # Post-configure QT
          if [ "${{ inputs.qt-install }}" = "true" ]; then
            qt_v=$(qmake -query QT_VERSION)
            echo "QT_VERSION=$qt_v" >> $GITHUB_ENV
          fi
          
          # Install packages for windows
          if [ "$RUNNER_OS" = "Windows" ]; then
            choco install ninja
            if [ "$CCACHE_VARIANT" = "ccache" ]; then
              choco upgrade ccache
            fi
          fi

      - name: Install cached dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: valgrind
          version: 1.1

      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ inputs.os }}-${{ inputs.build-type }}-qt${{ env.QT_VERSION }}
          max-size: ${{ inputs.ccache-max-size }}
          variant: ${{ env.CCACHE_VARIANT }}
          verbose: 2

      - name: Configure ccache
        shell: bash
        run: |
          echo "Cache variant: $CCACHE_VARIANT"
          if [ "$CCACHE_VARIANT" = "ccache" ]; then
            ccache --version
            ccache -z # Zero stats
          fi

      - name: Configure gcc problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Check static analysis (Linux)
        if: ${{ inputs.static-analysis && runner.os == 'Linux' }}
        run: |
          python -m pip install flawfinder
          
          for i in *; do
            if [ -d "$i" ]; then
              if [ "$i" != "lib" ]; then
                PYTHONUTF8=1 flawfinder "$i" --error-level=4
              fi
            elif [ -f "$i" ]; then
              if [ "$i" = "*.cpp" ] || [ "$i" = "*.c" ] || [ "$i" = "*.cxx" ] || [ "$i" = "*.h" ] || [ "$i" = "*.hxx" ] || [ "$i" = "*.hpp" ]; then 
                PYTHONUTF8=1 flawfinder "$i" --error-level=4
              fi
            fi
          done

      - name: Check CMake (Linux)
        if: ${{ inputs.cmake-check && runner.os == 'Linux' }}
        shell: bash
        run: |
          python -m pip install cmakelint
          
          # Define methods that recursively finds cmake files
          cmakelint_file() {
            if [ "$1" = "*.cmake" ] || [ "$(basename "$1")" = "CMakeLists.txt" ]; then
              echo "Checking CMake file: $1"
              cmakelint --filter=-linelength,-readability/mixedcase "$i"
            fi
          }
          cmakelint_recurse() {
            for i in "$1"/*; do
              if [ -d "$i" ]; then
                cmakelint_recurse "$i"
              elif [ -f "$i" ]; then
                cmakelint_file "$i"
              fi
            done
          }
          
          # Check root cmake files
          for i in *; do
            if [ -f "$i" ]; then
              cmakelint_file "$i"
            fi
          done
          
          # Recursively find in src and test
          cmakelint_recurse src
          cmakelint_recurse test

      - name: Configure CMake
        if: ${{ inputs.test }}
        run: >
          cmake
          -B ${{ github.workspace }}/build_${{ inputs.build-type }}
          -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
          -G ${{ env.CMAKE_GENERATOR }}
          -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VARIANT }}
          -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VARIANT }}

      - name: Build
        if: ${{ inputs.test }}
        id: build
        run: >
          cmake
          --build ${{ github.workspace }}/build_${{ inputs.build-type }}
          --config ${{ inputs.build-type }}
          -j ${{ steps.cpu-cores.outputs.count }}

      - name: Test
        if: ${{ inputs.test }}
        working-directory: ${{ github.workspace }}/build_${{ inputs.build-type }}
        shell: bash
        run: |
          ${{ inputs.test-before }}
          ctest -C ${{ inputs.build-type }} -T ${{ env.TEST_MODE }} -j ${{ steps.cpu-cores.outputs.count }} --verbose
          ${{ inputs.test-after }}

      - name: C++ Linter (Linux)
        if: ${{ inputs.linter && runner.os == 'Linux' }}
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}
        with:
          database: '${{ github.workspace }}/build_${{ inputs.build-type }}/compile_commands.json'
          extra-args: '-std=c++17'
          files-changed-only: true
          ignore: 'build_${{ inputs.build-type }} | lib | ../Qt'
          lines-changed-only: false
          style: ''
          tidy-checks: ''
          version: 15

      - name: C++ Linter output check
        if: ${{ inputs.linter && steps.linter.outputs.checks-failed > 0 }}
        run: exit 1

      - name: Check release requirements (Windows)
        if: ${{ runner.os == 'Windows' && inputs.release-windows && ( !inputs.release-windows-pr || inputs.release-windows-pr && github.event_name == 'pull_request' ) }}
        shell: bash
        run: |
          echo "RELEASE_WIN=true" >> $GITHUB_ENV
          if [ "${{ inputs.release-windows-pr }}" = "true" ]; then
            echo "Release enabled in PR mode"
          else
            echo "Release enabled in non-PR mode"
          fi

      - name: Configure CMake release (Windows)
        if: ${{ env.RELEASE_WIN == 'true' }}
        run: >
          cmake
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=Release
          -G ${{ env.CMAKE_GENERATOR }}
          -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VARIANT }}
          -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VARIANT }}

      - name: Build release (Windows)
        id: build-release
        if: ${{ env.RELEASE_WIN == 'true' }}
        run: >
          cmake
          --build ${{ github.workspace }}/build
          --config Release
          -j ${{ steps.cpu-cores.outputs.count }}

      - name: Upload release artifact (Windows)
        if: ${{ env.RELEASE_WIN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: ${{ github.workspace }}/build